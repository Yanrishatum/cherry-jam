// Generated by Haxe 3.3.0
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function () {
    "use strict";
    var HxOverrides = function () {
    };
    HxOverrides.__name__ = true;
    HxOverrides.cca = function (s, index) {
        var x = s.charCodeAt(index);
        if (x != x) {
            return undefined;
        }
        return x;
    };
    HxOverrides.iter = function (a) {
        return {
            cur: 0, arr: a, hasNext: function () {
                return this.cur < this.arr.length;
            }, next: function () {
                return this.arr[this.cur++];
            }
        };
    };
    var Lambda = function () {
    };
    Lambda.__name__ = true;
    Lambda.iter = function (it, f) {
        var tmp = $iterator(it)();
        while (tmp.hasNext()) f(tmp.next());
    };
    Lambda.fold = function (it, f, first) {
        var tmp = $iterator(it)();
        while (tmp.hasNext()) first = f(tmp.next(), first);
        return first;
    };
    Math.__name__ = true;
    var RunSauceLabs = function () {
    };
    RunSauceLabs.__name__ = true;
    RunSauceLabs.successMsg = function (msg) {
        console.log("\x1B[32m" + msg + "\x1B[0m");
    };
    RunSauceLabs.failMsg = function (msg) {
        console.log("\x1B[31m" + msg + "\x1B[0m");
    };
    RunSauceLabs.infoMsg = function (msg) {
        console.log("\x1B[36m" + msg + "\x1B[0m");
    };
    RunSauceLabs.isEs5 = function (b) {
        return !(b.browserName == "internet explorer" && Std.parseInt(b.version) <= 8);
    };
    RunSauceLabs.main = function () {
        var serveDomain = "localhost";
        var servePort = "2000";
        var connectDomain = "localhost";
        var connectPort = "4445";
        var urls = [];
        var browsers = [{
            'browserName': "internet explorer",
            'platform': "Windows XP",
            'version': "8.0",
            'prerun': "https://support.saucelabs.com/customer/portal/kb_article_attachments/59514/original.bat"
        }, {
            'browserName': "internet explorer",
            'platform': "Windows 7",
            'version': "9.0",
            'prerun': "https://support.saucelabs.com/customer/portal/kb_article_attachments/59514/original.bat"
        }, {
            'browserName': "internet explorer",
            'platform': "Windows 7",
            'version': "10.0"
        }, {'browserName': "internet explorer", 'platform': "Windows 8.1", 'version': "11.0"}, {
            'browserName': "chrome",
            'platform': "Windows XP"
        }, {'browserName': "firefox", 'platform': "Windows XP"}, {
            'browserName': "safari",
            'platform': "OS X 10.8",
            'version': "6.0"
        }, {'browserName': "safari", 'platform': "OS X 10.9", 'version': "7.0"}, {
            'browserName': "safari",
            'platform': "OS X 10.10",
            'version': "8.0"
        }, {'browserName': "safari", 'platform': "OS X 10.11", 'version': "9.0"}];
        var arg;
        var args = process.argv.slice(2);
        while (true) {
            arg = args.shift();
            if (!(arg != null)) {
                break;
            }
            switch (arg) {
                case "-browsers":
                    browsers = JSON.parse(args.shift());
                    break;
                case "-connect-domain":
                    connectDomain = args.shift();
                    break;
                case "-connect-port":
                    connectPort = args.shift();
                    break;
                case "-serve-domain":
                    serveDomain = args.shift();
                    break;
                case "-serve-port":
                    servePort = args.shift();
                    break;
                default:
                    urls.push(arg);
            }
        }
        var allSuccess = true;
        var q = require("q");
        var browser = require("wd").promiseRemote(connectDomain, connectPort, process.env.SAUCE_USERNAME, process.env.SAUCE_ACCESS_KEY);
        var tags = [];
        if (process.env.TRAVIS != null) {
            tags.push("TravisCI");
        }
        var maxDuration = 300;
        var commandTimeout = 60;
        var testBrowser = null;
        testBrowser = function (caps, trials) {
            if (trials == null) {
                trials = 3;
            }
            console.log("========================================================");
            var browserName = Object.prototype.hasOwnProperty.call(caps, "version") ? "" + Std.string(caps.browserName) + " " + Std.string(caps.version) : caps.browserName;
            console.log("Requesting: " + browserName + " on " + Std.string(caps.platform));
            caps.name = process.env.TRAVIS != null ? process.env.TRAVIS_REPO_SLUG : "haxe";
            caps.tags = tags;
            caps.maxDuration = maxDuration;
            caps.commandTimeout = commandTimeout;
            caps.avoidProxy = true;
            if (process.env.TRAVIS != null) {
                caps["tunnel-identifier"] = process.env.TRAVIS_JOB_NUMBER;
                caps.build = process.env.TRAVIS_BUILD_NUMBER;
            }
            --trials;
            var onErrored = function (err) {
                console.log(Std.string(err));
                console.log("detail: " + JSON.stringify(err, null, "  "));
                if (trials > 0) {
                    return browser.sauceJobUpdate({passed: true, tags: tags.concat(["errored"])}).then(function () {
                        return browser.quit();
                    }).timeout(commandTimeout * 1000).fin(function () {
                        return testBrowser(caps, trials);
                    });
                } else {
                    allSuccess = false;
                    return null;
                }
            };
            var until = null;
            until = function (code) {
                return browser.execute(code).then(function (v) {
                    if (v) {
                        return null;
                    } else {
                        return q.delay(1000).then(function () {
                            return until(code);
                        });
                    }
                });
            };
            var until1 = until;
            var browserSuccess = true;
            var urls1 = !RunSauceLabs.isEs5(caps) ? urls.filter(function (url) {
                return url.indexOf("js-es=3") != -1;
            }) : urls;
            return browser.init(caps).then(function () {
                return browser.sessionCapabilities().then(function (caps1) {
                    console.log("Using: " + caps1.browserName + " " + caps1.version + " on " + caps1.platform);
                });
            }).then(function () {
                return browser.setAsyncScriptTimeout(commandTimeout * 1000);
            }).then(function () {
                var tmp = q();
                return Lambda.fold(urls1, function (url1, promise) {
                    return promise.then(function () {
                        var url2 = "http://" + serveDomain + ":" + servePort + "/" + url1;
                        console.log("[debug] opening " + url2);
                        return browser.get(url2).then(function () {
                            console.log("[debug] waiting for test to exit");
                            return until1("return (typeof window.success === 'boolean');").timeout(commandTimeout * 1000);
                        }).then(function () {
                            console.log("[debug] test exited");
                            return browser.text("body");
                        }).then(function (text) {
                            Lambda.iter(text.split("\n"), RunSauceLabs.infoMsg);
                        }).then(function () {
                            return browser.execute("return window.success;").then(function (success) {
                                if (browserSuccess) {
                                    browserSuccess = success;
                                } else {
                                    browserSuccess = false;
                                }
                                if (allSuccess) {
                                    allSuccess = browserSuccess;
                                } else {
                                    allSuccess = false;
                                }
                                if (success) {
                                    RunSauceLabs.successMsg("" + url2 + " in " + Std.string(caps.browserName) + " " + Std.string(caps.version) + " on " + Std.string(caps.platform) + ": SUCCESS");
                                } else {
                                    RunSauceLabs.failMsg("" + url2 + " in " + Std.string(caps.browserName) + " " + Std.string(caps.version) + " on " + Std.string(caps.platform) + ": FAIL");
                                }
                            });
                        }).timeout(maxDuration * 1000);
                    });
                }, tmp);
            }).then(function () {
                return browser.sauceJobUpdate({passed: browserSuccess});
            }).fail(onErrored).then(function () {
                return browser.quit();
            });
        };
        var testBrowser1 = testBrowser;
        var tmp1 = q();
        Lambda.fold(browsers, function (caps2, promise1) {
            return promise1.then(function () {
                return testBrowser1(caps2);
            });
        }, tmp1).then(function () {
            process.exit(allSuccess ? 0 : 1);
        }).fail(function () {
            process.exit(1);
        });
    };
    var Std = function () {
    };
    Std.__name__ = true;
    Std.string = function (s) {
        return js_Boot.__string_rec(s, "");
    };
    Std.parseInt = function (x) {
        var v = parseInt(x, 10);
        if (v == 0 && (HxOverrides.cca(x, 1) == 120 || HxOverrides.cca(x, 1) == 88)) {
            v = parseInt(x);
        }
        if (isNaN(v)) {
            return null;
        }
        return v;
    };
    var haxe_io_Bytes = function () {
    };
    haxe_io_Bytes.__name__ = true;
    var js_Boot = function () {
    };
    js_Boot.__name__ = true;
    js_Boot.__string_rec = function (o, s) {
        if (o == null) {
            return "null";
        }
        if (s.length >= 5) {
            return "<...>";
        }
        var t = typeof(o);
        if (t == "function" && (o.__name__ || o.__ename__)) {
            t = "object";
        }
        switch (t) {
            case "function":
                return "<function>";
            case "object":
                if (o instanceof Array) {
                    if (o.__enum__) {
                        if (o.length == 2) {
                            return o[0];
                        }
                        var str = o[0] + "(";
                        s += "\t";
                        var _g1 = 2;
                        var _g = o.length;
                        while (_g1 < _g) {
                            var i = _g1++;
                            if (i != 2) {
                                str += "," + js_Boot.__string_rec(o[i], s);
                            } else {
                                str += js_Boot.__string_rec(o[i], s);
                            }
                        }
                        return str + ")";
                    }
                    var l = o.length;
                    var i1;
                    var str1 = "[";
                    s += "\t";
                    var _g11 = 0;
                    var _g2 = l;
                    while (_g11 < _g2) {
                        var i2 = _g11++;
                        str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2], s);
                    }
                    str1 += "]";
                    return str1;
                }
                var tostr;
                try {
                    tostr = o.toString;
                } catch (e) {
                    return "???";
                }
                if (tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
                    var s2 = o.toString();
                    if (s2 != "[object Object]") {
                        return s2;
                    }
                }
                var k = null;
                var str2 = "{\n";
                s += "\t";
                var hasp = o.hasOwnProperty != null;
                for (var k in o) {
                    if (hasp && !o.hasOwnProperty(k)) {
                        continue;
                    }
                    if (k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
                        continue;
                    }
                    if (str2.length != 2) {
                        str2 += ", \n";
                    }
                    str2 += s + k + " : " + js_Boot.__string_rec(o[k], s);
                }
                s = s.substring(1);
                str2 += "\n" + s + "}";
                return str2;
            case "string":
                return o;
            default:
                return String(o);
        }
    };
    var js_node_buffer_Buffer = require("buffer").Buffer;

    function $iterator(o) {
        if (o instanceof Array) return function () {
            return HxOverrides.iter(o);
        };
        return typeof(o.iterator) == 'function' ? $bind(o, o.iterator) : o.iterator;
    }

    var $_, $fid = 0;

    function $bind(o, m) {
        if (m == null) return null;
        if (m.__id__ == null) m.__id__ = $fid++;
        var f;
        if (o.hx__closures__ == null) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__];
        if (f == null) {
            f = function () {
                return f.method.apply(f.scope, arguments);
            };
            f.scope = o;
            f.method = m;
            o.hx__closures__[m.__id__] = f;
        }
        return f;
    }

    String.__name__ = true;
    Array.__name__ = true;
    RunSauceLabs.main();
})();

//# sourceMappingURL=RunSauceLabs.js.map